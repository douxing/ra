// Generated by CoffeeScript 1.7.1
var Matchday, ObjectId, User, models_path, mongoose, parse, thunkify, util;

mongoose = require('mongoose');

thunkify = require('thunkify');

parse = require('co-body');

util = require('util');

models_path = "" + __dirname + "/../models";

ObjectId = mongoose.Types.ObjectId;

Matchday = require("" + models_path + "/matchday");

User = require("" + models_path + "/user");

module.exports = function(app, config) {
  console.log('about to add routes for matchdays...');
  app.get('/matchdays', function*() {
    var matchdays;
    console.log("about to route: GET /matchdays");
    matchdays = yield Matchday.find().exec();
    this.body = matchdays;
  });
  app.post('/matchdays/add', function*() {
    var body, matchday;
    console.log("about to route: POST matchdays/add");
    body = yield parse(this);
    console.log("matchday body: " + (util.inspect(body)));
    matchday = new Matchday(body);
    matchday.id = yield Matchday.count().exec();
    matchday.save = thunkify(matchday.save);
    yield matchday.save();
    this.status = 201;
    this.body = matchday;
  });
  return app.post('/matchdays/:matchday_id/update_score', function*(next) {
    var body, i, index, matchday, obj, _i, _len, _ref;
    console.log("about to route: POST /matchdays/" + (util.inspect(this.params)) + "/update_score");
    matchday = yield Matchday.findOne({
      _id: ObjectId(this.params.matchday_id)
    }).exec();
    body = yield parse(this);
    if (body.score) {
      body.score = parseFloat(body.score);
    }
    console.log("matchday body: " + (util.inspect(body)) + " \nmatchday: " + (util.inspect(matchday)));
    index = void 0;
    _ref = matchday.scores;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      obj = _ref[i];
      if (obj.player.toString() === body.player) {
        index = i;
        break;
      }
    }
    console.log("index = " + index);
    debugger;
    if (index != null) {
      if (body.score) {
        matchday.scores[index].score = body.score;
      } else {
        matchday.scores.splice(index, 1);
      }
    } else {
      if (body.score) {
        matchday.scores.push({
          player: ObjectId(body.player),
          score: body.score
        });
      }
    }
    console.log("after matchday body: " + (util.inspect(body)) + " \nmatchday: " + (util.inspect(matchday)));
    matchday.save = thunkify(matchday.save);
    yield matchday.save();
    this.status = 201;
    this.body = body;
  });
};

// Generated by CoffeeScript 1.7.1
var ra;

ra = angular.module('ra', ['ui.bootstrap', 'ui.router', 'ngGrid']);

ra.config([
  "$stateProvider", "$urlRouterProvider", function($stateProvider, $urlRouterProvider) {
    var shiftTemplate;
    shiftTemplate = "<div class='container'><div class='jumbotron text-center'><p>Loading...</p></div></div>";
    $urlRouterProvider.otherwise("/");
    return $stateProvider.state('index', {
      url: '/',
      views: {
        'main': {
          template: shiftTemplate,
          controller: [
            '$state', '$window', function($state, $window) {
              return $window.setTimeout(function() {
                return $state.go('matches');
              }, 0);
            }
          ]
        }
      }
    }).state("matches", {
      url: "/matches/:manage",
      resolve: {
        users: [
          '$http', function($http) {
            return $http.get('/users').then(function(data) {
              return data.data;
            });
          }
        ],
        matchdays: [
          '$http', function($http) {
            return $http.get('/matchdays').then(function(data) {
              var days, matchday, obj, scoreDict, _i, _j, _len, _len1, _ref, _ref1;
              days = [];
              _ref = data.data;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                matchday = _ref[_i];
                scoreDict = {};
                _ref1 = matchday.scores;
                for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                  obj = _ref1[_j];
                  scoreDict[obj.player] = obj;
                }
                matchday.scores = scoreDict;
                days[matchday.id] = matchday;
              }
              return days;
            });
          }
        ]
      },
      views: {
        'main': {
          templateUrl: '/tpls/match/list.html',
          controller: [
            '$rootScope', '$state', '$stateParams', 'users', 'matchdays', '$scope', '$modal', '$window', function($rootScope, $state, $stateParams, users, matchdays, $scope, $modal, $window) {
              var headerCellTemplate, matchday, user, _i, _j, _k, _len, _len1, _len2;
              for (_i = 0, _len = users.length; _i < _len; _i++) {
                user = users[_i];
                user.matchdays = matchdays;
              }
              $rootScope.rootCapsule.users.splice(0, $rootScope.rootCapsule.users.length);
              for (_j = 0, _len1 = users.length; _j < _len1; _j++) {
                user = users[_j];
                $rootScope.rootCapsule.users.push(user);
              }
              $rootScope.rootCapsule.matchdays.splice(0, $rootScope.rootCapsule.matchdays.length);
              for (_k = 0, _len2 = matchdays.length; _k < _len2; _k++) {
                matchday = matchdays[_k];
                $rootScope.rootCapsule.matchdays.push(matchday);
              }
              $rootScope.rootCapsule.manage = $stateParams.manage === 'manage' ? true : false;
              headerCellTemplate = '<div class="ngHeaderSortColumn {{col.headerClass}}" ng-style="{\'cursor\': col.cursor}" ng-class="{ \'ngSorted\': !noSortVisible }"><div ng-click="col.sort($event)" ng-class="\'colt\' + col.index" class="ngHeaderText">{{col.displayName}}</div><div class="ngSortButtonDown" ng-show="col.showSortButtonDown()"></div><div class="ngSortButtonUp" ng-show="col.showSortButtonUp()"></div><div class="ngSortPriority">{{col.sortPriority}}</div><div ng-class="{ ngPinnedIcon: col.pinned, ngUnPinnedIcon: !col.pinned }" ng-click="togglePin(col)" ng-show="false"></div></div><div ng-show="col.resizable" class="ngHeaderGrip" ng-click="col.gripClick($event)" ng-mousedown="col.gripOnMouseDown($event)"></div>';
              $scope.capsule = {
                myData: [
                  {
                    name: "Moroni",
                    age: 50,
                    birthday: "Oct 28, 1970",
                    salary: "60,000"
                  }, {
                    name: "Tiancum",
                    age: 43,
                    birthday: "Feb 12, 1985",
                    salary: "70,000"
                  }, {
                    name: "Jacob",
                    age: 27,
                    birthday: "Aug 23, 1983",
                    salary: "50,000"
                  }, {
                    name: "Nephi",
                    age: 29,
                    birthday: "May 31, 2010",
                    salary: "40,000"
                  }, {
                    name: "Enos",
                    age: 34,
                    birthday: "Aug 3, 2008",
                    salary: "30,000"
                  }, {
                    name: "Moroni",
                    age: 50,
                    birthday: "Oct 28, 1970",
                    salary: "60,000"
                  }, {
                    name: "Tiancum",
                    age: 43,
                    birthday: "Feb 12, 1985",
                    salary: "70,000"
                  }, {
                    name: "Jacob",
                    age: 27,
                    birthday: "Aug 23, 1983",
                    salary: "40,000"
                  }, {
                    name: "Nephi",
                    age: 29,
                    birthday: "May 31, 2010",
                    salary: "50,000"
                  }, {
                    name: "Enos",
                    age: 34,
                    birthday: "Aug 3, 2008",
                    salary: "30,000"
                  }, {
                    name: "Moroni",
                    age: 50,
                    birthday: "Oct 28, 1970",
                    salary: "60,000"
                  }, {
                    name: "Tiancum",
                    age: 43,
                    birthday: "Feb 12, 1985",
                    salary: "70,000"
                  }, {
                    name: "Jacob",
                    age: 27,
                    birthday: "Aug 23, 1983",
                    salary: "40,000"
                  }, {
                    name: "Nephi",
                    age: 29,
                    birthday: "May 31, 2010",
                    salary: "50,000"
                  }, {
                    name: "Enos",
                    age: 34,
                    birthday: "Aug 3, 2008",
                    salary: "30,000"
                  }
                ],
                gridOptions: {
                  enablePinning: true,
                  columnDefs: [
                    {
                      field: "name",
                      width: 120,
                      pinned: true,
                      headerCellTemplate: headerCellTemplate
                    }, {
                      field: "age",
                      width: 120
                    }, {
                      field: "birthday1",
                      width: 120
                    }, {
                      field: "salary",
                      width: 120
                    }
                  ],
                  data: 'capsule.myData'
                }
              };
              return $scope.changeScore = function(user, matchday) {
                var modal;
                modal = $modal.open({
                  templateUrl: '/tpls/matchday/score.html',
                  controller: [
                    '$scope', '$http', function($scope, $http) {
                      var _ref, _ref1;
                      $scope.user = user;
                      $scope.matchday = matchday;
                      $scope.user_matchday_score_origin = $scope.user_matchday_score = (_ref = (_ref1 = matchday.scores[user._id]) != null ? _ref1.score : void 0) != null ? _ref : '';
                      $scope.ok = function() {
                        return $http.post("/matchdays/" + matchday._id + "/update_score", {
                          player: user._id,
                          score: $scope.user_matchday_score
                        }).success(function(data, status, headers, config) {
                          var t;
                          t = [data, status, headers, config];
                          matchday.scores[user._id] = data;
                          return modal.close('ok');
                        }).error(function(data, status, headers, config) {
                          var t;
                          t = [data, status, headers, config];
                          return modal.dismiss('error');
                        });
                      };
                      return $scope.cancel = function() {
                        return modal.dismiss('cancel');
                      };
                    }
                  ],
                  backdrop: 'static'
                });
                return modal.result.then(function() {}, function() {});
              };
            }
          ]
        }
      },
      auth: true
    }).state('last12', {
      url: '/last12',
      views: {
        'main': {
          templateUrl: '/tpls/match/last12.html',
          controller: [
            '$scope', function($scope) {
              return $scope;
            }
          ]
        }
      },
      auth: true
    });
  }
]);

ra.run([
  '$rootScope', '$location', function($rootScope, $location) {
    $rootScope.rootCapsule = {
      state_changing: false,
      edit: false,
      users: [],
      matchdays: []
    };
    $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {
      var t;
      t = [event, toState, toParams, fromState, fromParams];
      return $rootScope.state_changing = true;
    });
    $rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams) {
      var t;
      t = [event, toState, toParams, fromState, fromParams];
      return $rootScope.state_changing = false;
    });
    $rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {
      var t;
      t = [event, toState, toParams, fromState, fromParams];
      return $rootScope.state_changing = false;
    });
    return $rootScope.$on('$stateNotFound', function(event, toState, toParams, fromState, fromParams) {
      var t;
      t = [event, toState, toParams, fromState, fromParams];
      return $rootScope.state_changing = false;
    });
  }
]);
